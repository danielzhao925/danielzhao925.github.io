---
layout: post
title:  "Codility lession6 - 2"
date:   2016-05-16 15:09:43 +0800
categories: Codility
---

Distinct

Write a function

int solution(int A[], int N);

that, given a zero-indexed array A consisting of N integers, returns the number of distinct values in array A.

Assume that:

N is an integer within the range [0..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].
For example, given array A consisting of six elements such that:

A[0] = 2    A[1] = 1    A[2] = 1
A[3] = 2    A[4] = 3    A[5] = 1
the function should return 3, because there are 3 distinct values appearing in array A, namely 1, 2 and 3.

Complexity:

expected worst-case time complexity is O(N*log(N));
expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.


void mergearray(int a[], int first, int mid, int last, int temp[])
{
//    printf("3: %d %d", first,last);
//    printf("\n");

    int i = first, j = mid + 1;
    int m = mid,   n = last;
    int k = 0;

    while (i <= m && j <= n)
    {
        if (a[i] <= a[j])
            temp[k++] = a[i++];
        else
            temp[k++] = a[j++];
    }

    while (i <= m)
        temp[k++] = a[i++];

    while (j <= n)
        temp[k++] = a[j++];

    for (i = 0; i < k; i++)
        a[first + i] = temp[i];
}
void mergeSort(int a[], int first, int last, int temp[])
{
    if (first < last)
    {
        int mid = (first + last) / 2;
      //  printf("1: %d %d", first,mid);
       // printf("\n");
        mergeSort(a, first, mid, temp);    //左边有序
       // printf("2: %d %d", mid+1,last);
       // printf("\n");
        mergeSort(a, mid + 1, last, temp); //右边有序
        mergearray(a, first, mid, last, temp); //再将二个有序数列合并
    }
}

int solution(int A[], int N){

    int n = 0;

    if (N > 0) {

        if (N > 1) {
            int *x = (int*)malloc(N*sizeof(int));;
            mergeSort(A, 0, N - 1, x);

            for (int i=0;i<N; i++){
                if (A[i] != A[i+1]) {
                    n++;
                }
            }

        }
        else{
            n = 1;
        }

    }


    return n;
}
